#!/bin/bash

# Restart apache server
service httpd restart

# Create a folder that will contains figures generated by ceilometer
mkdir -p /var/www/html/cc

# Give permission to "cc" user to write in /var/www/html
chmod 777 -R /var/www/html/cc

# Create a nice web index pages that
cat > /var/www/html/index.html <<- EOM
<html>
	<head>
		<title>Welcome to the chameleon webinar</title>
		<!-- Latest compiled and minified CSS -->
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">

		<!-- Optional theme -->
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous">
	</head>
	<body>
		<table class="table">
			<thead>
				<tr>
					<th><img src="https://www.chameleoncloud.org/static/images/logo.png"/>Webinar resources</th>
					<th>Link</th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td>Public folder located in <i>/var/www/html/cc</i></td>
					<td><a href="cc">link</a></td>
				</tr>
				<tr>
					<td>Monitoring App</td>
					<td><a href="monitor">link</a></td>
				</tr>
			</tbody>
		</table>
	</body>
</html>
EOM

# Clean the benchmark folder
rm -rf /home/cc/spark-1.6.1-bin-hadoop2.6/work

# Clean the benchmark folder
chmod 777 -R spark-perf/

# Generate ssh keys
runuser -l cc -c "bash generate_ssh_keys.sh"

# Create a screen for the webinar
SCREEN_NAME="webinar"
COMMON_SCREEN_ARGS="-S $SCREEN_NAME -X screen"

runuser -l cc -c "screen -AdmS $SCREEN_NAME"

# Run the benchmark in the previously created screen
runuser -l cc -c "screen $COMMON_SCREEN_ARGS -t benchmark -dm bash spark-perf/bin/run"

#########################################################
# Generate openrc file that will be used to upload image
#########################################################

# The extract_json_key function is in charge of find a key in a flat JSON value.
# Please note that if the JSON value is not flat, it should return the first value
# associated to the given key.
#    $1: String that represents the key
#    $2: String that represents the JSON value
#    return: the value of the key in the JSON value
# example: extract_json_key 'foo' '{"foo": 1, "bar": 2}'

function extract_json_key {
    RESULT=$(echo "$2" | sed "s/.*$1\": \"//g" | sed 's/".*//g')
    echo "$RESULT"
}

JSON_VENDOR_DATA=$(curl -s http://169.254.169.254/openstack/latest/vendor_data.json)
SITE=$(extract_json_key "site" "$JSON_VENDOR_DATA")

if [ "$SITE" != "tacc" ] && [ "$SITE" != "uc" ]; then
    # The current instance  is apparently not a baremetal node.
    echo "ERROR: Could not understand which site you are using, please  be sure that you run the script inside a baremetal instance!"
    exit 1
fi

USER_ID=$(extract_json_key "user_id" "$JSON_VENDOR_DATA")
PROJECT_ID=$(extract_json_key "project_id" "$JSON_VENDOR_DATA")

cat > chameleon_rc.sh <<- EOM
#!/bin/bash

# To use an OpenStack cloud you need to authenticate against the Identity
# service named keystone, which returns a **Token** and **Service Catalog**.
# The catalog contains the endpoints for all services the user/tenant has
# access to - such as Compute, Image Service, Identity, Object Storage, Block
# Storage, and Networking (code-named nova, glance, keystone, swift,
# cinder, and neutron).
#
# *NOTE*: Using the 2.0 *Identity API* does not necessarily mean any other
# OpenStack API is version 2.0. For example, your cloud provider may implement
# Image API v1.1, Block Storage API v2, and Compute API v2.0. OS_AUTH_URL is
# only for the Identity API served through keystone.
export OS_AUTH_URL=https://chi.$SITE.chameleoncloud.org:5000/v2.0

# With the addition of Keystone we have standardized on the term **tenant**
# as the entity that owns the resources.
export OS_TENANT_ID=$PROJECT_ID
export OS_TENANT_NAME="$PROJECT_ID"
export OS_PROJECT_NAME="$PROJECT_ID"

# In addition to the owning entity (tenant), OpenStack stores the entity
# performing the action as the **user**.
export OS_USERNAME="$USER_ID"

# With Keystone you pass the keystone password.
echo "Please enter your OpenStack Password: "
read -sr OS_PASSWORD_INPUT
export OS_PASSWORD=\$OS_PASSWORD_INPUT

# If your configuration has multiple regions, we set that information here.
# OS_REGION_NAME is optional and only valid in certain environments.
export OS_REGION_NAME="regionOne"
# Don't leave a blank variable, unset it if it was empty
if [ -z "\$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi
EOM

set +x
